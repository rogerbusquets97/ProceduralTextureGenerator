// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel BlendMultiply
#pragma kernel BlendAddition
#pragma kernel BlendSubstraction
#pragma kernel BlendMask
#pragma kernel BlendScreen
#pragma kernel BlendOverlay
#pragma kernel BlendMax
#pragma kernel BlendMin
#pragma kernel BlendDivide
#pragma kernel BlendAddSub

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
RWTexture2D<float4> A;
RWTexture2D<float4> B;
RWTexture2D<float4> Mask;

float4 Mult(float4 a, float4 b)
{
	return a * b;
}
float4 Screen(float4 a, float4 b)
{
	return 1 - ((1 - a)*(1 - b));
}
[numthreads(8,8,1)]
void BlendMultiply(uint3 id : SV_DispatchThreadID)
{
	float3 color = A[id.xy].rgb * B[id.xy].rgb;
	Result[id.xy] = float4(color, 1);
}

[numthreads(8, 8, 1)]
void BlendAddition(uint3 id : SV_DispatchThreadID)
{
	float3 color = clamp(A[id.xy].rgb + B[id.xy].rgb, 0, 1);
	Result[id.xy] = float4(color, 1);
}

[numthreads(8, 8, 1)]
void BlendSubstraction(uint3 id : SV_DispatchThreadID)
{
	float3 color = clamp(A[id.xy].rgb - B[id.xy].rgb, 0, 1);
	Result[id.xy] = float4(color, 1);
}

[numthreads(8, 8, 1)]
void BlendMask(uint3 id : SV_DispatchThreadID)
{
	float3 color = lerp(A[id.xy].rgb, B[id.xy].rgb, Mask[id.xy].r);
	Result[id.xy] = float4(color, 1);
}
[numthreads(8, 8, 1)]
void BlendScreen(uint3 id : SV_DispatchThreadID)
{
	float4 color = Screen(A[id.xy], B[id.xy]);
	Result[id.xy] = color;
}
[numthreads(8, 8, 1)]
void BlendOverlay(uint3 id : SV_DispatchThreadID)
{
	float4 color = float4(0., 0., 0., 1.);
	
	if (A[id.xy].r < 0.5)
	{
		color.r = 2.*( A[id.xy].r * B[id.xy].r);
	}
	else
	{
		color.r = 1. - 2.*((1. - A[id.xy].r)*(1. - B[id.xy].r));
	}

	if (A[id.xy].g < 0.5)
	{
		color.g = 2.*(A[id.xy].g * B[id.xy].g);
	}
	else
	{
		color.g = 1. - 2.*((1. - A[id.xy].g)*(1. - B[id.xy].g));
	}

	if (A[id.xy].b < 0.5)
	{
		color.b = 2.*(A[id.xy].b * B[id.xy].b);
	}
	else
	{
		color.b = 1. - 2.*((1. - A[id.xy].b)*(1. - B[id.xy].b));
	}
	color.a = 1.;
	Result[id.xy] = color;
}

[numthreads(8, 8, 1)]
void BlendMax(uint3 id : SV_DispatchThreadID)
{
	Result[id.xy] = max(A[id.xy], B[id.xy]);
}

[numthreads(8, 8, 1)]
void BlendMin(uint3 id : SV_DispatchThreadID)
{
	Result[id.xy] = min(A[id.xy], B[id.xy]);
}

[numthreads(8, 8, 1)]
void BlendDivide(uint3 id : SV_DispatchThreadID)
{
	Result[id.xy] = B[id.xy] / A[id.xy];
}

[numthreads(8, 8, 1)]
void BlendAddSub(uint3 id : SV_DispatchThreadID)
{
	float4 color = float4(0, 0, 0, 1);
	if (A[id.xy].r > 0.5)
	{
		color = A[id.xy] + B[id.xy];
	}
	else
	{
		color = B[id.xy] - A[id.xy];
	}

	color.a = 1.;
	Result[id.xy] = color;
}

