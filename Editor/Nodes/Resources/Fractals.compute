
#pragma kernel SeamlessFractalBrownianMotion
#pragma kernel SeamlessFractalBillow
#pragma kernel SeamlessFractalRidged
#pragma kernel FractalRidged
#pragma kernel FractalBillow
#pragma kernel FractalBrownianMotion


RWTexture2D<float4> Result;
int octaves;
float ressolution;
float frequency;
float XScale;
float YScale;

//Utilities
float3 fmod289(float3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
float2 fmod289(float2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
float3 spermute(float3 x) { return fmod289(((x*34.0) + 1.0)*x); }
float permute(float x) {
	return fmod((34.0 * x + 1.0) * x, 289.0);
}
float2 permute(float2 x) {
	return fmod((34.0 * x + 1.0) * x, 289.0);
}
float3 permute(float3 x) {
	return fmod((34.0 * x + 1.0) * x, 289.0);
}
float4 permute(float4 x) {
	return fmod((34.0 * x + 1.0) * x, 289.0);
}
float2 hash(float2 p)
{
	p = float2(dot(p, float2(127.1, 311.7)), dot(p, float2(269.5, 183.3)));
	return frac(sin(p)*43758.5453);
}
float random(in float2 st) {
	return frac(sin(dot(st.xy,
		float2(12.9898, 78.233)))*
		43758.5453123);
}

// Noise
float snoise(float2 v) {
	const float4 C = float4(0.211324865405187,
		0.366025403784439,
		-0.577350269189626,
		0.024390243902439);

	float2 i = floor(v + dot(v, C.yy));
	float2 x0 = v - i + dot(i, C.xx);

	float2 i1 = float2(0.0, 0.0);
	i1 = (x0.x > x0.y) ? float2(1.0, 0.0) : float2(0.0, 1.0);
	float2 x1 = x0.xy + C.xx - i1;
	float2 x2 = x0.xy + C.zz;

	i = fmod289(i);
	float3 p = spermute(
		spermute(i.y + float3(0.0, i1.y, 1.0))
		+ i.x + float3(0.0, i1.x, 1.0));

	float3 m = max(0.5 - float3(
		dot(x0, x0),
		dot(x1, x1),
		dot(x2, x2)
	), 0.0);

	m = m * m;
	m = m * m;

	float3 x = 2.0 * frac(p * C.www) - 1.0;
	float3 h = abs(x) - 0.5;
	float3 ox = floor(x + 0.5);
	float3 a0 = x - ox;

	m *= 1.79284291400159 - 0.85373472095314 * (a0*a0 + h * h);

	float3 g = float3(0.0, 0.0, 0.0);
	g.x = a0.x  * x0.x + h.x  * x0.y;
	g.yz = a0.yz * float2(x1.x, x2.x) + h.yz * float2(x1.y, x2.y);
	return 130.0 * dot(m, g);
}
float noise(in float2 st)
{

	float2 i = floor(st);
	float2 f = frac(st);

	float a = random(i);
	float b = random(i + float2(1.0, 0.0));
	float c = random(i + float2(0.0, 1.0));
	float d = random(i + float2(1.0, 1.0));

	float2 u = f * f * (3.0 - 2.0 * f);

	return lerp(a, b, u.x) +
		(c - a)* u.y * (1.0 - u.x) +
		(d - b) * u.x * u.y;
}

// Fracals
float fbm(in float2 st) {
	float value = 0.0;
	float amplitude = .5;
	//st *= frequency;

	for (int i = 0; i < octaves; i++) {
		value += amplitude * snoise(st);
		st *= 2.;
		amplitude *= .5;
	}

	return value;
}

float SeamlessfBm(in float2 p)
{
	float u = p.x / ressolution;
	float v = p.y / ressolution;

	float noise00 = fbm(p) * 0.5 + 0.5;
	float noise01 = fbm(p + float2(0., ressolution)) * 0.5 + 0.5;
	float noise10 = fbm(p + float2(ressolution, 0.)) * 0.5 + 0.5;
	float noise11 = fbm(p + float2(ressolution, ressolution)) * 0.5 + 0.5;

	float totalNoise = u * v * noise00 + u * (1 - v) * noise01 + (1 - u) * v * noise10 + (1 - u) * (1 - v) * noise11;

	float totalValue = (256 * totalNoise) + 50;
	float r = clamp(noise00, 0, 255);
	float g = clamp(totalValue, 0, 255);
	float b = clamp(totalValue + 50, 0, 255);

	return (r + g + b) / (3 * 255.0f);
}

float billow(in float2 st)
{
	float value = 0.0;
	float amplitude = .5;
	st *= frequency;

	for (int i = 0; i < octaves; i++) {
		value += amplitude * abs(snoise(st));
		st *= 2.;
		amplitude *= .5;
	}

	return value;
}
float SeamlessBillow(in float2 p)
{
	float u = p.x / ressolution;
	float v = p.y / ressolution;

	float noise00 = billow(p);
	float noise01 = billow(p + float2(0., ressolution));
	float noise10 = billow(p + float2(ressolution, 0.));
	float noise11 = billow(p + float2(ressolution, ressolution));

	float totalNoise = u * v * noise00 + u * (1 - v) * noise01 + (1 - u) * v * noise10 + (1 - u) * (1 - v) * noise11;

	float totalValue = (256 * totalNoise) + 50;
	float r = clamp(noise00, 0, 255);
	float g = clamp(totalValue, 0, 255);
	float b = clamp(totalValue + 50, 0, 255);

	return (r + g + b) / (3 * 255.0f);
}
float ridged(in float2 st)
{
	float value = 0.0;
	float amplitude = .5;
	st *= frequency;

	for (int i = 0; i < octaves; i++) {
		value += amplitude * abs(snoise(st));
		st *= 2.;
		amplitude *= .5;
	}

	value = 1 - value;
	return value * value;;
}
float SeamlessRidged(in float2 p)
{
	float u = p.x / ressolution;
	float v = p.y / ressolution;

	float noise00 = ridged(p);
	float noise01 = ridged(p + float2(0., ressolution));
	float noise10 = ridged(p + float2(ressolution, 0.));
	float noise11 = ridged(p + float2(ressolution, ressolution));

	float totalNoise = u * v * noise00 + u * (1 - v) * noise01 + (1 - u) * v * noise10 + (1 - u) * (1 - v) * noise11;

	float totalValue = (256 * totalNoise) + 50;
	float r = clamp(noise00, 0, 255);
	float g = clamp(totalValue, 0, 255);
	float b = clamp(totalValue + 50, 0, 255);

	return (r + g + b) / (3 * 255.0f);
}

//Kernels
[numthreads(8, 8, 1)]
void SeamlessFractalBrownianMotion(uint3 id : SV_DispatchThreadID)
{
	float2 st = id.xy;
	st *= frequency;
	/*
	float w = SeamlessfBm(st * 16.);
	st += 0.2 * float2(w, -w);*/

	float3 color = float3(0.0, 0.0, 0.0);
	color += SeamlessfBm(st);

	Result[id.xy] = float4(color, 1.0);
}
[numthreads(8, 8, 1)]
void SeamlessFractalBillow(uint3 id : SV_DispatchThreadID)
{
	float2 st = id.xy;
	float3 color = float3(0.0, 0.0, 0.0);
	color += SeamlessBillow(st);

	Result[id.xy] = float4(color, 1.0);
}
[numthreads(8, 8, 1)]
void SeamlessFractalRidged(uint3 id : SV_DispatchThreadID)
{
	float2 st = id.xy;
	float3 color = float3(0.0, 0.0, 0.0);
	color += SeamlessRidged(st);

	Result[id.xy] = float4(color, 1.0);
}
[numthreads(8, 8, 1)]
void FractalRidged(uint3 id : SV_DispatchThreadID)
{
	float2 st = id.xy;
	float3 color = float3(0.0, 0.0, 0.0);
	color += ridged(st);

	Result[id.xy] = float4(color, 1.0);
}
[numthreads(8, 8, 1)]
void FractalBillow(uint3 id : SV_DispatchThreadID)
{
	float2 st = id.xy;
	float3 color = float3(0.0, 0.0, 0.0);
	color += billow(st);

	Result[id.xy] = float4(color, 1.0);
}
[numthreads(8, 8, 1)]
void FractalBrownianMotion(uint3 id : SV_DispatchThreadID)
{
	float2 st = id.xy;
	st *= frequency;

	float3 color = float3(0.0, 0.0, 0.0);
	color += fbm(st)*0.5 + 0.5;

	Result[id.xy] = float4(color, 1.0);
}


