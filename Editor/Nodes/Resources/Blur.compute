// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Blur

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
RWTexture2D<float4> source;
float2 direction;
float ressolution;
float radius;

[numthreads(8,8,1)]
void Blur (uint3 id : SV_DispatchThreadID)
{
	float4 sum = float4(0.0,0.0,0.0,0.0);

	//our original texcoord for this fragment
	float2 tc = id.xy/ressolution;

	//the amount to blur, i.e. how far off center to sample from 
	//1.0 -> blur by one pixel
	//2.0 -> blur by two pixels, etc.
	float blur = radius / ressolution;

	//the direction of our blur
	//(1.0, 0.0) -> x-axis blur
	//(0.0, 1.0) -> y-axis blur
	float hstep = direction.x;
	float vstep = direction.y;

	//apply blurring, using a 9-tap filter with predefined gaussian weights

	sum += source[frac(float2(tc.x - 4.0*blur*hstep, tc.y - 4.0*blur*vstep))*ressolution] * 0.0162162162;
	sum += source[frac(float2(tc.x - 3.0*blur*hstep, tc.y - 3.0*blur*vstep))*ressolution] * 0.0540540541;
	sum += source[frac(float2(tc.x - 2.0*blur*hstep, tc.y - 2.0*blur*vstep))*ressolution] * 0.1216216216;
	sum += source[frac(float2(tc.x - 1.0*blur*hstep, tc.y - 1.0*blur*vstep))*ressolution] * 0.1945945946;

	sum += source[frac(float2(tc.x, tc.y))*ressolution] * 0.2270270270;

	sum += source[frac(float2(tc.x + 1.0*blur*hstep, tc.y + 1.0*blur*vstep))*ressolution] * 0.1945945946;
	sum += source[frac(float2(tc.x + 2.0*blur*hstep, tc.y + 2.0*blur*vstep))*ressolution] * 0.1216216216;
	sum += source[frac(float2(tc.x + 3.0*blur*hstep, tc.y + 3.0*blur*vstep))*ressolution] * 0.0540540541;
	sum += source[frac(float2(tc.x + 4.0*blur*hstep, tc.y + 4.0*blur*vstep))*ressolution] * 0.0162162162;

	Result[id.xy] = sum;
}
