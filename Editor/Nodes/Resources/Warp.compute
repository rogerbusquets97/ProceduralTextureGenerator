// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Warp
#define PI 3.14159265358979323846
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
RWTexture2D<float4> source;
RWTexture2D<float4> warper;
float strength;
float ressolution; 
float angle;

float2 rotate2D(float2 _st, float _angle) {
	_st -= 0.5;
	float2x2 rot = { cos(_angle), -sin(_angle),
		sin(_angle), cos(_angle) };

	_st = mul(rot, _st);
	_st += 0.5;
	return _st;
}

[numthreads(8,8,1)]
void Warp (uint3 id : SV_DispatchThreadID)
{
	float2 uv = id.xy / ressolution;
	float w = warper[(uv)*ressolution].r;
	float2 p = float2( w, w);
	p = rotate2D(p, PI*angle);
	float2 st = uv + p * strength;
	st = frac(st);
	Result[id.xy] = float4(source[st * ressolution].xyz, 1.);

}
