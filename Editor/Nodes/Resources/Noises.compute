
#pragma kernel FractalBrownianMotion
#pragma kernel F1DistanceVoronoi
#pragma kernel F2DistanceVoronoi
#pragma kernel FractalBillow
#pragma kernel FractalRidged
#pragma kernel F1DistanceSeamlessVoronoi
#pragma kernel F2DistanceSeamlessVoronoi
#pragma kernel FMinusDistanceVoronoi
#pragma kernel FMinusDistanceSeamlessVoronoi

RWTexture2D<float4> Result;
int octaves;
float ressolution;
float frequency;
float XScale;
float YScale;

//Utilities
float3 fmod289(float3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
float2 fmod289(float2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
float3 spermute(float3 x) { return fmod289(((x*34.0) + 1.0)*x); }

/*float fmod(float x, float y)
{
	return x - y * floor(x / y);
}

float fmod(float3 x, float3 y)
{
	return x - y * floor(x / y);
}

float fmod(float2 x, float2 y)
{
	return x - y * floor(x / y);
}*/


float permute(float x) {
	return fmod((34.0 * x + 1.0) * x, 289.0);
}

float2 permute(float2 x) {
	return fmod((34.0 * x + 1.0) * x, 289.0);
}

float3 permute(float3 x) {
	return fmod((34.0 * x + 1.0) * x, 289.0);
}

float4 permute(float4 x) {
	return fmod((34.0 * x + 1.0) * x, 289.0);
}
float2 hash(float2 p)
{
	p = float2(dot(p, float2(127.1, 311.7)), dot(p, float2(269.5, 183.3)));
	return frac(sin(p)*43758.5453);
}
float random(in float2 st) {
	return frac(sin(dot(st.xy,
		float2(12.9898, 78.233)))*
		43758.5453123);
}

//Worley
float3 dist(float3 x, float3 y, float3 z, bool manhattanDistance) {
	return manhattanDistance ? abs(x) + abs(y) + abs(z) : (x * x + y * y + z * z);
}

float2 pworley(float3 P, float3 rep, float jitter, bool manhattanDistance)
{

	float K = 0.142857142857; // 1/7
	float Ko = 0.428571428571; // 1/2-K/2
	float K2 = 0.020408163265306; // 1/(7*7)
	float Kz = 0.166666666667; // 1/6
	float Kzo = 0.416666666667; // 1/2-1/6*2

	float3 Pi = fmod(floor(P), rep); // Integer cell coordinates
	float3 Pf = frac(P) - 0.5;     // parametric position in cell, -0.5..0.5.

	float3 Pfx = Pf.x + float3(1.0, 0.0, -1.0);
	float3 Pfy = Pf.y + float3(1.0, 0.0, -1.0);
	float3 Pfz = Pf.z + float3(1.0, 0.0, -1.0);

	float3 p = permute(fmod(Pi.x + float3(-1.0, 0.0, 1.0), rep.x));
	float3 p1 = permute(fmod(p + Pi.y - 1.0, rep.y));
	float3 p2 = permute(fmod(p + Pi.y, rep.y));
	float3 p3 = permute(fmod(p + Pi.y + 1.0, rep.y));

	float3 p11 = permute(p1 + Pi.z - 1.0);
	float3 p12 = permute(p1 + Pi.z);
	float3 p13 = permute(p1 + Pi.z + 1.0);

	float3 p21 = permute(p2 + Pi.z - 1.0);
	float3 p22 = permute(p2 + Pi.z);
	float3 p23 = permute(p2 + Pi.z + 1.0);

	float3 p31 = permute(p3 + Pi.z - 1.0);
	float3 p32 = permute(p3 + Pi.z);
	float3 p33 = permute(p3 + Pi.z + 1.0);

	float3 ox11 = frac(p11 * K) - Ko;
	float3 oy11 = fmod(floor(p11 * K), 7.0) * K - Ko;
	float3 oz11 = floor(p11 * K2) * Kz - Kzo; // p11 < 289 guaranteed

	float3 ox12 = frac(p12 * K) - Ko;
	float3 oy12 = fmod(floor(p12 * K), 7.0) * K - Ko;
	float3 oz12 = floor(p12 * K2) * Kz - Kzo;

	float3 ox13 = frac(p13 * K) - Ko;
	float3 oy13 = fmod(floor(p13 * K), 7.0) * K - Ko;
	float3 oz13 = floor(p13 * K2) * Kz - Kzo;

	float3 ox21 = frac(p21 * K) - Ko;
	float3 oy21 = fmod(floor(p21 * K), 7.0) * K - Ko;
	float3 oz21 = floor(p21 * K2) * Kz - Kzo;

	float3 ox22 = frac(p22 * K) - Ko;
	float3 oy22 = fmod(floor(p22 * K), 7.0) * K - Ko;
	float3 oz22 = floor(p22 * K2) * Kz - Kzo;

	float3 ox23 = frac(p23 * K) - Ko;
	float3 oy23 = fmod(floor(p23 * K), 7.0) * K - Ko;
	float3 oz23 = floor(p23 * K2) * Kz - Kzo;

	float3 ox31 = frac(p31 * K) - Ko;
	float3 oy31 = fmod(floor(p31 * K), 7.0) * K - Ko;
	float3 oz31 = floor(p31 * K2) * Kz - Kzo;

	float3 ox32 = frac(p32 * K) - Ko;
	float3 oy32 = fmod(floor(p32 * K), 7.0) * K - Ko;
	float3 oz32 = floor(p32 * K2) * Kz - Kzo;

	float3 ox33 = frac(p33 * K) - Ko;
	float3 oy33 = fmod(floor(p33 * K), 7.0) * K - Ko;
	float3 oz33 = floor(p33 * K2) * Kz - Kzo;

	float3 dx11 = Pfx + jitter * ox11;
	float3 dy11 = Pfy.x + jitter * oy11;
	float3 dz11 = Pfz.x + jitter * oz11;

	float3 dx12 = Pfx + jitter * ox12;
	float3 dy12 = Pfy.x + jitter * oy12;
	float3 dz12 = Pfz.y + jitter * oz12;

	float3 dx13 = Pfx + jitter * ox13;
	float3 dy13 = Pfy.x + jitter * oy13;
	float3 dz13 = Pfz.z + jitter * oz13;

	float3 dx21 = Pfx + jitter * ox21;
	float3 dy21 = Pfy.y + jitter * oy21;
	float3 dz21 = Pfz.x + jitter * oz21;

	float3 dx22 = Pfx + jitter * ox22;
	float3 dy22 = Pfy.y + jitter * oy22;
	float3 dz22 = Pfz.y + jitter * oz22;

	float3 dx23 = Pfx + jitter * ox23;
	float3 dy23 = Pfy.y + jitter * oy23;
	float3 dz23 = Pfz.z + jitter * oz23;

	float3 dx31 = Pfx + jitter * ox31;
	float3 dy31 = Pfy.z + jitter * oy31;
	float3 dz31 = Pfz.x + jitter * oz31;

	float3 dx32 = Pfx + jitter * ox32;
	float3 dy32 = Pfy.z + jitter * oy32;
	float3 dz32 = Pfz.y + jitter * oz32;

	float3 dx33 = Pfx + jitter * ox33;
	float3 dy33 = Pfy.z + jitter * oy33;
	float3 dz33 = Pfz.z + jitter * oz33;

	float3 d11 = dist(dx11, dy11, dz11, manhattanDistance);
	float3 d12 = dist(dx12, dy12, dz12, manhattanDistance);
	float3 d13 = dist(dx13, dy13, dz13, manhattanDistance);
	float3 d21 = dist(dx21, dy21, dz21, manhattanDistance);
	float3 d22 = dist(dx22, dy22, dz22, manhattanDistance);
	float3 d23 = dist(dx23, dy23, dz23, manhattanDistance);
	float3 d31 = dist(dx31, dy31, dz31, manhattanDistance);
	float3 d32 = dist(dx32, dy32, dz32, manhattanDistance);
	float3 d33 = dist(dx33, dy33, dz33, manhattanDistance);

	float3 d1a = min(d11, d12);
	d12 = max(d11, d12);
	d11 = min(d1a, d13); // Smallest now not in d12 or d13
	d13 = max(d1a, d13);
	d12 = min(d12, d13); // 2nd smallest now not in d13
	float3 d2a = min(d21, d22);
	d22 = max(d21, d22);
	d21 = min(d2a, d23); // Smallest now not in d22 or d23
	d23 = max(d2a, d23);
	d22 = min(d22, d23); // 2nd smallest now not in d23
	float3 d3a = min(d31, d32);
	d32 = max(d31, d32);
	d31 = min(d3a, d33); // Smallest now not in d32 or d33
	d33 = max(d3a, d33);
	d32 = min(d32, d33); // 2nd smallest now not in d33
	float3 da = min(d11, d21);
	d21 = max(d11, d21);
	d11 = min(da, d31); // Smallest now in d11
	d31 = max(da, d31); // 2nd smallest now not in d31
	d11.xy = (d11.x < d11.y) ? d11.xy : d11.yx;
	d11.xz = (d11.x < d11.z) ? d11.xz : d11.zx; // d11.x now smallest
	d12 = min(d12, d21); // 2nd smallest now not in d21
	d12 = min(d12, d22); // nor in d22
	d12 = min(d12, d31); // nor in d31
	d12 = min(d12, d32); // nor in d32
	d11.yz = min(d11.yz, d12.xy); // nor in d12.yz
	d11.y = min(d11.y, d12.z); // Only two more to go
	d11.y = min(d11.y, d11.z); // Done! (Phew!)
	return sqrt(d11.xy); // F1, F2
}
// Noise
float snoise(float2 v) {
	const float4 C = float4(0.211324865405187,
		0.366025403784439,
		-0.577350269189626,
		0.024390243902439);

	float2 i = floor(v + dot(v, C.yy));
	float2 x0 = v - i + dot(i, C.xx);

	float2 i1 = float2(0.0, 0.0);
	i1 = (x0.x > x0.y) ? float2(1.0, 0.0) : float2(0.0, 1.0);
	float2 x1 = x0.xy + C.xx - i1;
	float2 x2 = x0.xy + C.zz;

	i = fmod289(i);
	float3 p = spermute(
		spermute(i.y + float3(0.0, i1.y, 1.0))
		+ i.x + float3(0.0, i1.x, 1.0));

	float3 m = max(0.5 - float3(
		dot(x0, x0),
		dot(x1, x1),
		dot(x2, x2)
	), 0.0);

	m = m * m;
	m = m * m;

	float3 x = 2.0 * frac(p * C.www) - 1.0;
	float3 h = abs(x) - 0.5;
	float3 ox = floor(x + 0.5);
	float3 a0 = x - ox;

	m *= 1.79284291400159 - 0.85373472095314 * (a0*a0 + h * h);

	float3 g = float3(0.0, 0.0, 0.0);
	g.x = a0.x  * x0.x + h.x  * x0.y;
	g.yz = a0.yz * float2(x1.x, x2.x) + h.yz * float2(x1.y, x2.y);
	return 130.0 * dot(m, g);
}
float noise(in float2 st)
{

	float2 i = floor(st);
	float2 f = frac(st);

	float a = random(i);
	float b = random(i + float2(1.0, 0.0));
	float c = random(i + float2(0.0, 1.0));
	float d = random(i + float2(1.0, 1.0));

	float2 u = f * f * (3.0 - 2.0 * f);

	return lerp(a, b, u.x) +
		(c - a)* u.y * (1.0 - u.x) +
		(d - b) * u.x * u.y;
}

// fracals
float fbm(in float2 st) {
	float value = 0.0;
	float amplitude = .5;
	//st *= frequency;

	for (int i = 0; i < octaves; i++) {
		value += amplitude * snoise(st);
		st *= 2.;
		amplitude *= .5;
	}

	return value;
}

float SeamlessfBm(in float2 p)
{
	float u = p.x / ressolution;
	float v = p.y / ressolution;

	float noise00 = fbm(p) * 0.5 + 0.5;
	float noise01 = fbm(p + float2(0., ressolution)) * 0.5 + 0.5;
	float noise10 = fbm(p + float2(ressolution, 0.)) * 0.5 + 0.5;
	float noise11 = fbm(p + float2(ressolution, ressolution)) * 0.5 + 0.5;

	float totalNoise = u * v * noise00 + u * (1 - v) * noise01 + (1 - u) * v * noise10 + (1 - u) * (1 - v) * noise11;

	float totalValue = (256 * totalNoise) + 50;
	float r = clamp(noise00, 0, 255);
	float g = clamp(totalValue, 0, 255);
	float b = clamp(totalValue + 50, 0, 255);

	return (r + g + b) / (3 * 255.0f);
}

float billow(in float2 st)
{
	float value = 0.0;
	float amplitude = .5;
	st *= frequency;

	for (int i = 0; i < octaves; i++) {
		value += amplitude * abs(snoise(st));
		st *= 2.;
		amplitude *= .5;
	}

	return value;
}
float SeamlessBillow(in float2 p)
{
	float u = p.x / ressolution;
	float v = p.y / ressolution;

	float noise00 = billow(p);
	float noise01 = billow(p + float2(0., ressolution));
	float noise10 = billow(p + float2(ressolution, 0.));
	float noise11 = billow(p + float2(ressolution, ressolution));

	float totalNoise = u * v * noise00 + u * (1 - v) * noise01 + (1 - u) * v * noise10 + (1 - u) * (1 - v) * noise11;

	float totalValue = (256 * totalNoise) + 50;
	float r = clamp(noise00, 0, 255);
	float g = clamp(totalValue, 0, 255);
	float b = clamp(totalValue + 50, 0, 255);

	return (r + g + b) / (3 * 255.0f);
}
float ridged(in float2 st)
{
	float value = 0.0;
	float amplitude = .5;
	st *= frequency;

	for (int i = 0; i < octaves; i++) {
		value += amplitude * abs(snoise(st));
		st *= 2.;
		amplitude *= .5;
	}

	value = 1 - value;
	return value * value;;
}
float SeamlessRidged(in float2 p)
{
	float u = p.x / ressolution;
	float v = p.y / ressolution;

	float noise00 = ridged(p);
	float noise01 = ridged(p + float2(0., ressolution));
	float noise10 = ridged(p + float2(ressolution, 0.));
	float noise11 = ridged(p + float2(ressolution, ressolution));

	float totalNoise = u * v * noise00 + u * (1 - v) * noise01 + (1 - u) * v * noise10 + (1 - u) * (1 - v) * noise11;

	float totalValue = (256 * totalNoise) + 50;
	float r = clamp(noise00, 0, 255);
	float g = clamp(totalValue, 0, 255);
	float b = clamp(totalValue + 50, 0, 255);

	return (r + g + b) / (3 * 255.0f);
}
float F1Cellular(float2 st)
{
	float2 Dist = 1.;
	float2 I = floor(st);
	float2 F = frac(st);

	for (int X = -1; X <= 1; X++)
		for (int Y = -1; Y <= 1; Y++)
		{
			float D = distance(hash(I + float2(X, Y)) + float2(X, Y), F);
			if (D < Dist.x)
			{
				Dist.y = Dist.x;
				Dist.x = D;
			}
			else if (D < Dist.y)
			{
				Dist.y = D;
			}
		}

	return Dist.x;
}

float F2Cellular(float2 st)
{
	float2 Dist = 1.;
	float2 I = floor(st);
	float2 F = frac(st);

	for (int X = -1; X <= 1; X++)
		for (int Y = -1; Y <= 1; Y++)
		{
			float D = distance(hash(I + float2(X, Y)) + float2(X, Y), F);
			if (D < Dist.x)
			{
				Dist.y = Dist.x;
				Dist.x = D;
			}
			else if (D < Dist.y)
			{
				Dist.y = D;
			}
		}

	return Dist.y;
}

float FMinusCellular(float2 st)
{
	float2 Dist = 1.;
	float2 I = floor(st);
	float2 F = frac(st);

	for (int X = -1; X <= 1; X++)
		for (int Y = -1; Y <= 1; Y++)
		{
			float D = distance(hash(I + float2(X, Y)) + float2(X, Y), F);
			if (D < Dist.x)
			{
				Dist.y = Dist.x;
				Dist.x = D;
			}
			else if (D < Dist.y)
			{
				Dist.y = D;
			}
		}

	return Dist.y - Dist.x;
}

float F1Cellularfractal(float2 p)
{
	p *= frequency;
	float value = 0.0;
	float amplitude = .5;
	//
	// Loop of octaves
	for (int i = 0; i < octaves; i++) {
		value += amplitude * F1Cellular(p);
		p *= 2.;
		amplitude *= .5;
	}

	return value;
}

float F2Cellularfractal(float2 p)
{
	p *= frequency;
	float value = 0.0;
	float amplitude = .5;
	//
	// Loop of octaves
	for (int i = 0; i < octaves; i++) {
		value += amplitude * F2Cellular(p);
		p *= 2.;
		amplitude *= .5;
	}

	return value;
}

float FMinusCellularfractal(float2 p)
{
	p *= frequency;
	float value = 0.0;
	float amplitude = .5;
	//
	// Loop of octaves
	for (int i = 0; i < octaves; i++) {
		value += amplitude * FMinusCellular(p);
		p *= 2.;
		amplitude *= .5;
	}

	return value;
}

float F1CellularSeamlessfractal(float2 p)
{
	//p *= frequency;
	float2 value = float2(0.0,0.0);
	float amplitude = .5;
	float2 s = float2(float(XScale), float(YScale));
	//
	// Loop of octaves
	for (int i = 0; i < octaves; i++) {
		value += amplitude * pworley(float3(p * s, 1000), float3(s, 1000), 1., false);
		p *= 2.;
		amplitude *= .5;
	}

	return value;
}


//Kernels
[numthreads(8, 8, 1)]
void FractalBrownianMotion(uint3 id : SV_DispatchThreadID)
{
	float2 st = id.xy;
	st *= frequency;
	/*
	float w = SeamlessfBm(st * 16.);
	st += 0.2 * float2(w, -w);*/

	float3 color = float3(0.0, 0.0, 0.0);
	color += SeamlessfBm(st);

	Result[id.xy] = float4(color, 1.0);
}
[numthreads(8, 8, 1)]
void FractalBillow(uint3 id : SV_DispatchThreadID)
{
	float2 st = id.xy;
	float3 color = float3(0.0, 0.0, 0.0);
	color += SeamlessBillow(st);

	Result[id.xy] = float4(color, 1.0);
}
[numthreads(8, 8, 1)]
void FractalRidged(uint3 id : SV_DispatchThreadID)
{
	float2 st = id.xy;
	float3 color = float3(0.0, 0.0, 0.0);
	color += SeamlessRidged(st);

	Result[id.xy] = float4(color, 1.0);
}
[numthreads(8, 8, 1)]
void F1DistanceVoronoi(uint3 id : SV_DispatchThreadID)
{
	float2 st = id.xy;
	float c = F1Cellularfractal(st);
	float3 color = float3(c, c, c);
	Result[id.xy] = float4(color, 1.0);
}

[numthreads(8, 8, 1)]
void F1DistanceSeamlessVoronoi(uint3 id : SV_DispatchThreadID)
{
	float2 st = float2(id.x / ressolution, id.y / ressolution);

	float2 s = float2(float(XScale), float(YScale));
	float2 f = pworley(float3(st * s, 1000), float3(s, 1000), 1., false) * 0.5;

	float res = f.x;
	Result[id.xy] = float4(res, res, res, 1);
}

[numthreads(8, 8, 1)]
void F2DistanceVoronoi(uint3 id : SV_DispatchThreadID)
{
	float2 st = id.xy;
	float c = F2Cellularfractal(st);
	float3 color = float3(c, c, c);
	Result[id.xy] = float4(color, 1.0);
}

[numthreads(8, 8, 1)]
void FMinusDistanceVoronoi(uint3 id : SV_DispatchThreadID)
{
	float2 st = id.xy;
	float c = FMinusCellularfractal(st);
	float3 color = float3(c, c, c);
	Result[id.xy] = float4(color, 1.0);
}

[numthreads(8, 8, 1)]
void F2DistanceSeamlessVoronoi(uint3 id : SV_DispatchThreadID)
{
	float2 st = float2(id.x / ressolution, id.y / ressolution);

	float2 s = float2(float(XScale), float(YScale));
	float2 f = pworley(float3(st * s, 1000), float3(s, 1000), 1., false) * 0.5;

	float res = f.y;
	Result[id.xy] = float4(res, res, res, 1);

}

[numthreads(8, 8, 1)]
void FMinusDistanceSeamlessVoronoi(uint3 id : SV_DispatchThreadID)
{
	float2 st = float2(id.x / ressolution, id.y / ressolution);

	float2 s = float2(float(XScale), float(YScale));
	float2 f = pworley(float3(st * s, 1000), float3(s, 1000), 1., false) * 0.5;

	float res = f.y - f.x;
	Result[id.xy] = float4(res, res, res, 1);

}



